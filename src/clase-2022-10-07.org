* Factor Equilibrio
FactorEquilibrio = altura(subarbolIzq) - altura(subArbolDer)

Si FactorEquilibrio > 0 el arbol está equilibrado hacia la izq. Si es < 0, esta equlibrado hacia la derecha.

Si un arbol sus subárboles no difieren en un número de nodos mayor a 1, el árbol está perfectamente equilibrado.

Si un arbol sus subárboles no difieren en su altura mayor a 1, el arbol esta equilibrado.

Si un subarbol sus subárboles no están equilibrado, el arbol no está equilibrado.

Existen diferentes tipos de arboles binarios, árbol lleno, árbol completo y el árbol degenerado, pero la estructura general de los arboles binarios se componen del struct, los datos y dos nodos, uno para la rama izquierda y otro para la rama derecha.

#+begin_src c
  struct nodo {
      int dato;
      Nodo* der;
      Nodo* izq;
  };
#+end_src

Se dice que dos arboles binarios son distinos cuando sus estructuras son completamente diferentes.

Dos arboles binarios son similares cuando sus estructuras son idénticas pero su información es diferente.

Dos arboles son equivalentes cuando sus estructuras son idénticas y su información igual.

Completos: Son aquellos arboles que todos sus nodos excepto los del último nivel tiene dos hijos; el subárbol izquierdo y el subárbol derecho.

Árbol Degenerado: es un tipo especial de árbol en el qe hay un solo nodo hoja y cada nodo no hoja sólo tiene un hijo. Un arbol degenerado es el equivalente a una lista enlazada.

Para crear un nodo:
#+begin_src c
  ArbolBinario CrearNodo(TipoElemento x)
  {
      ArbolBInario a;
      a = (ArbolBinario) malloc(sizeof(ElementoDeArbolBin));
      a->indo = x;
      a->hijo-derecho = a->hijo->izq = NULL;
      return a;
  }

  

#+end_src

En un arreglo, si la raíz de un árbol se almacena en A[i], su hijo izquierdo se almacena en A[2*i], y su hijo derecho en A[2*i +1].

- a
  + b
    * d
  + c
    * e
    * f
      - g
      - h

a
  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
[a, b, c, d,  , e, f,  ,  ,  ,  ,  ,  , g, h,  ]
